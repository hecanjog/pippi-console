#!/usr/bin/env python2.7

"""Pippi Console

Usage:
    pippi
    pippi new <dirname>
    pippi --version

Options:
    -h --help       You're lookin at it.
    --version       Print version.
    new <dirname>   Create a new session with the given directory name. 

"""

import cmd
import os
import sys
import re
import json
import subprocess
import glob
import docopt

from pippi import dsp

from pippic import settings
from pippic import rt

import multiprocessing as mp
from termcolor import colored

class Pippi(cmd.Cmd):
    """ Pippi Console 
    """

    dsp.log('starting', 'w')
    prompt = '^_- '
    intro = 'Pippi Console'

    def __init__(self):
        cmd.Cmd.__init__(self)

        # Load config from file and populate current session
        settings.init_session()

        self.bpm = settings.config('bpm')
        self.root = settings.config('a0')

        # Create shared namespace for buffers
        self.buffers = mp.Manager().Namespace()

        # Incrementing voice id
        self.current_id = 0

        # Update sys.path to include generator orc/ directory
        self.orc_paths = json.loads(settings.config('orc'))
        sys.path += self.orc_paths

        # Start rhythm grid tick process
        self.tick = mp.Event()
        self.grid = mp.Process(name='grid', target=rt.grid, args=(self.tick, self.bpm))
        self.grid.start()

        sys.path += ['bots/']
        sys.path += self.orc_paths

        # Load all available generators into a dict 
        self.generators = {}

        try:
            gens = []
            for orc_path in self.orc_paths:
                gens += glob.glob("%s%s*.py" % (orc_path, os.sep))

            for filename in gens:
                # Get fileame from relative path and strip .py extension
                filename = os.path.basename(filename)[:-3]

                # import the generator
                gen = __import__(filename)
            
                # Fetch the shortname or just use the first two letters of the filename
                shortname = gen.shortname if hasattr(gen, 'shortname') else filename[0:2]

                self.generators[shortname] = gen

            settings.import_generators(self.generators)

            print 'Loaded', len(gens), 'generators from', ' '.join(self.orc_paths)

        except OSError:
            print 'No generators found in ' + self.orc_path

        print

    def do_bot(self, cmd):
        botname = cmd.strip()
        bot = __import__(botname)

        bot_process = mp.Process(name=botname, target=bot.run, args=(self.generators, self.tick))
        bot_process.start()

    def do_bpm(self, cmd):
        try:
            # Update self.bpm
            # Restart grid process with new bpm
            # Recursive update of all running voices by default
                # Only update master if 'master' param passed
            self.grid.terminate()
            self.bpm = float(cmd)
            settings.config('bpm', self.bpm)

            self.grid = mp.Process(name='grid', target=rt.grid, args=(self.tick, self.bpm))
            self.grid.start()

            settings.param('all', 'bpm', self.bpm)
 
        except Exception, e:
            dsp.log(e)

    def do_tp(self, cmd):
        settings.get_params(1)

    def do_root(self, cmd):
        try:
            self.a0 = float(cmd)

            settings.param('all', 'a0', self.a0)

        except Exception, e:
            dsp.log(e)

    def do_u(self, cmd):
        try:
            cmds = cmd.split(' ')
            voice_id = cmds.pop(0).strip()

            voice_list = re.match(r'^\d+(\.\d+)+$', voice_id)

            if voice_list is not None:
                voice_list = voice_id.split('.')
                for voice_id in voice_list:
                    self.update_param(voice_id, cmds=cmds)
                    self.update_param(voice_id, 'once', True)
            else:
                self.update_param(voice_id, cmds=cmds)
                self.update_param(voice_id, 'once', True)
        except Exception, e:
            dsp.log(e)

    def do_uu(self, cmd):
        try:
            gen = 'all'

            cmds = cmd.split(' ')
            if cmds[0] != '' and cmds[0] != 'all':
                gen = cmds.pop(0)

            self.update_param(gen, cmds=cmds)

        except Exception, e:
            dsp.log(e)

    def do_ss(self, cmd):
        try:
            cmds = cmd.strip().split(' ')
            gen = cmds.pop(0)
            gen = gen if len(gen) > 0 else 'all'
            #self.update_params(gen=gen, param='loop', value=False)
            settings.voice('all', 'loop', False)
        except Exception, e:
            dsp.log(e)

    def do_s(self, cmd):
        try:
            cmds = cmd.split(' ')

            for cmd in cmds:
                voice_id = cmd.strip() 
                settings.voice(voice_id, 'loop', False)

        except Exception, e:
            dsp.log(e)

    def do_vv(self, cmd):
        try:
            cmds = cmd.strip().split(' ')
            gen = cmds.pop(0)
            self.update_params(gen=gen, param='target_volume', value=float(cmds[0]) / 100.0)
        except Exception, e:
            dsp.log(e)

    def do_v(self, cmd):
        try:
            cmds = cmd.split(' ')
            self.update_param(cmds[0], 'target_volume', float(cmds[1]) / 100.0)
        except Exception, e:
            dsp.log(e)

    def do_i(self, cmd):
        for p in settings.get_all_params():
            print "%02i %s" % (int(p['voice']['id']), self.format_params(p['params']))

    def update_params(self, gen='all', param=None, value=None):
        self.update_param('all', param, value)

    def update_param(self, voice_id, param=None, value=None, cmds=None):
        if cmds is not None:
            for cmd in cmds:
                cmd = cmd.split(':')
                value = cmd[1] if len(cmd) == 2 else True

                # Some special values get replaced:
                # F becomes False
                if value == 'F':
                    value = False

                settings.param(voice_id, cmd[0], value)
        elif param is not None and value is not None:
           settings.param(voice_id, param, value)

    def format_params(self, params):
        # TODO: translate types & better formatting
        param_string = ''
        for param in params:
            value = param['value']
            name = param['name']
            if str(name) == 'generator':
                param_string += colored(str(name)[0:3] + ': ', 'blue')
                param_string += colored(str(value)[:10].upper(), 'green')
            else:
                param_string += colored(str(name)[0:3] + ': ', 'cyan')
                param_string += colored(str(value)[:10], 'yellow')

            param_string += ' '
        
        return param_string

    def do_group(self, cmd):
        try:
            cmd = cmd.split('--')
            group = [ a for a in cmd.pop(0).split(' ') if a != '' ]
            cmd = cmd[0].strip()

            for voice in range(int(group[0])):
                self.default(cmd)
        except Exception, e:
            dsp.log(e)

    def default(self, cmd):
        # Break comma separated commands
        # into a list of command strings
        cmds = cmd.strip().split(',')

        for cmd in cmds:
            self.current_id += 1
            voice_id, generator_name = settings.add_voice(cmd, self.current_id)

            playback_process = mp.Process(name=voice_id, target=rt.out, args=(self.generators[generator_name], self.tick, self.buffers))
            playback_process.start()

    def do_EOF(self, line):
        return True

    def postloop(self):
        pass

    def shutdown(self):
        active = mp.active_children()
        for p in active:
            p.terminate()
            p.join()

if __name__ == '__main__':
        args = docopt.docopt(__doc__)

        if args['new'] == True and args['<dirname>'] is not None:
            settings.new_session(args['<dirname>'])
            exit()

        # Create console
        console = Pippi()

        # Start looping command prompt
        try:
            console.cmdloop()
        except KeyboardInterrupt:
            console.shutdown()
            print 'Shutting down'

